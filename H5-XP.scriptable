{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "deep-blue",
    "glyph" : "sync-alt"
  },
  "name" : "H5-XP",
  "script" : "\n\/*\n\nDetailed setup instructions and more info avalible at https:\/\/github.com\/sac396\/H5-XP-iOS-Widget.\n\n*\/\n\n\/*-----------------------------------------*\/\n\/*  Initial Script Setup                   *\/\n\/*-----------------------------------------*\/\n\nlet prefs = {\n\n\t\"apiKey\": \"\",\n\t\"gamertag\": \"\",\n\t\/\/ used to determine goal\n\t\"targetCompletionDate\": \"November 20, 2021\",\n\n\t\/\/ visit iosfonts.com to see more fonts\n\t\"font\": \"DamascusBold\",\n\t\"fontSize\": 18,\n\t\/\/ adjust heightOffset if the lines of text are too close together or too far apart.\n\t\"heightOffset\": 8,\n\n\t\"useBackgroundImage\": true,\n\n\t\"showSR\": true,\n\t\"showTotalXP\": true,\n\t\"showTodaysXP\": true,\n\t\"showXPtoMax\": true,\n\t\"showLifetimeRate\": true,\n\t\"showTodaysGoal\": true,\n\t\/\/ accepts \"auto\", true, or false.\n\t\"showXPtoNextSR\": \"auto\",\n\n\t\"showCustomAverageRate\": true,\n\t\"customAverageRateDays\": 2,\n\n\t\"showCustomDaysGains\": true,\n\t\"customDaysGainsDays\": 7,\n\n\t\"showArmor\": true,\n\t\"showEmblem\": true,\n\n\t\/\/ the \"hard cap\" for XP is actually 100,000,000; but there is no SR 153. This overrides the script to set goals and everything else based on this 100 mil scale. If you are already at or above 50 mil, this will be true no matter what.\n\t\"use100MilInstead\": false,\n\n\t\"updateStoredValuesOnEachRun\": true,\n\t\/\/ It doesn't always update exactly when it should, but it won't do it any sooner than this (in hours):\n\t\"updateStoredValuesOnEachRunInterval\": 0.0166667,\n\n\t\"checkForUpdates\": true,\n\n\t\/\/ resets the storedValues.json file. This cannot be undone\n\t\"resetStoredValues\": false,\n\n\t\"useLog\": true\n\n}\n\n\n\/*-----------------------------------------*\/\n\/*  Initial Script Setup                   *\/\n\/*-----------------------------------------*\/\n\n\nlet startDate\nif (prefs.useLog) { startDate = new Date() }\n\nlet currentVer = 1.5\n\/\/ Used for checking for updates. pls don't change :-)\n\nlet xpAtDayStart\nlet fm = FileManager.iCloud()\n\n\nlet httpRequestDependecies = {\n\t\"emblem\": [prefs.showEmblem],\n\t\"armor\": [prefs.showArmor],\n\t\"sr\": [prefs.showXPtoMax, prefs.showSR, prefs.showXPtoNextSR],\n\t\"xp\": [prefs.showTotalXP, prefs.showTodaysXP, prefs.showXPtoMax, prefs.showXPtoNextSR],\n\t\"storedXP\": [prefs.showTodaysGoal, prefs.showTodaysXP],\n\t\"timePlayed\": [prefs.showLifetimeRate, prefs.showCustomAverageRate]\n}\n\nif (fm.fileExists(fm.documentsDirectory() + \"\/H5-XP-Prefs.json\")) { log(\"🟠 There is a \\\"H5-XP-Prefs.json\\\" file located in \/iCloud\/Scriptable\/. This file is not needed as of H5-XP version 2.0 and can be removed.\") }\nif (fm.bookmarkExists(\"H5-XP-StoredXP.json\")) { log(\"🟠 There is a Scriptable bookmark named \\\"H5-XP-StoredXP.json\\\". This is not needed as of H5-XP version 2.0 and can be removed. There may also be a \\\"H5-XP-StoredXP.json\\\" file in \/iCloud\/Shortcuts\/. This is no longer needed either and can be removed.\") }\n\n\/*-----------------------------------------*\/\n\/*  Functions                              *\/\n\/*-----------------------------------------*\/\n\n\n\/\/ create JSON element for the http results \nlet resultsList = {}\n\n\/\/ this function also makes as few API calls as possible, by saving each resposne to resultsList. If you call this function for the same URL twice, it will go back to the first API call you made.\nasync function smartHTTPRequest(url, prefsValue, isImage) {\n\n\tif (prefsValue === undefined) { prefsValue = true }\n\n\t\/\/ reformat gamertag and url\n\tlet gamertag = encodeURI(prefs[\"gamertag\"])\n\turl = url.replace(\/!gamertag\/i, gamertag)\n\n\t\/\/ check if we have actually made a request to this url before\n\tif (resultsList.hasOwnProperty(url)) {\n\n\t\tif (prefs.useLog) { log(\"🟢 retrieving stored response for \" + url) }\n\t\treturn (resultsList[url])\n\n\t} else if (prefsValue) {\n\n\t\tif (prefs.useLog) { log(\"🟢 fetching \" + url) }\n\n\t\t\/\/ contact server\n\t\trequest = new Request(url)\n\n\t\t\/\/ check if it's the halo API and provide the api key if it is\n\t\tif (url.includes(\"haloapi.com\")) { request.headers = { \"Ocp-Apim-Subscription-Key\": prefs.apiKey } }\n\n\t\t\/\/ determine how to parse response\n\t\tlet response\n\t\tif (isImage) {\n\t\t\tresponse = await request.loadImage()\n\t\t} else {\n\t\t\tresponse = await request.loadJSON()\n\t\t}\n\n\t\t\/\/ save this response to an array so we know we don't have to make redundant requests later\n\t\tresultsList[url] = response\n\t\treturn (response)\n\n\t}\n}\n\n\n\/\/ this is important for finding how many hours you have in arena and warzone\nfunction durationToHours(duration) {\n\tlet result = 0\n\tif (duration.includes(\"D\")) { result += (duration.match(\/[0-9.]*(?=D)\/) * (24)) }\n\tif (duration.includes(\"H\")) { result += (duration.match(\/[0-9.]*(?=H)\/) \/ (1)) }\n\tif (duration.includes(\"M\")) { result += (duration.match(\/[0-9.]*(?=M)\/) \/ (60)) }\n\tif (duration.includes(\"S\")) { result += (duration.match(\/[0-9.]*(?=S)\/) \/ (3600)) }\n\treturn (result)\n}\n\n\n\/*-----------------------------------------*\/\n\/*  Check if script needs to be set up     *\/\n\/*-----------------------------------------*\/\n\n\nif (!prefs.apiKey) {\n\n\tif (prefs.useLog) { log(\"🔴 No API Key Found\") }\n\n\tapiKeyAlert = new Alert()\n\tapiKeyAlert.title = \"No API Key Found\"\n\tapiKeyAlert.message = \"Head to developer.haloapi.com to get a key. Copy it and paste it in the \\\"apiKey\\\" part of the prefs. Then come back, and run the script again.\"\n\tapiKeyAlert.addAction(\"Go to developer.haloapi.com\")\n\tapiKeyAlert.addAction(\"Cancel\")\n\tlet alertIndex = await apiKeyAlert.presentAlert()\n\n\tif (alertIndex == 0) {\n\t\tSafari.open(\"https:\/\/developer.haloapi.com\/signin?ReturnUrl=%2Fproducts%2F560af1e42109182040fb56fc\")\n\t\tthrow new Error(\"Script aborted\")\n\t} else {\n\t\tthrow new Error(\"Script aborted\")\n\t}\n\n} else {\n\tif (prefs.useLog) { log(\"🟢 Running with API Key \\\"\" + prefs.apiKey + \"\\\"\") }\n}\n\nif (!prefs.gamertag) {\n\n\tif (prefs.useLog) { log(\"🔴 No Gamertag Found\") }\n\n\tgamertagAlert = new Alert()\n\tgamertagAlert.title = \"No Gamertag Found\"\n\tgamertagAlert.message = \"Enter it in the \\\"gamertag\\\" field in the prefs section at the top.\"\n\tgamertagAlert.addAction(\"Cancel\")\n\tlet alertIndex = await gamertagAlert.presentAlert()\n\n\tif (alertIndex == 0) { throw new Error(\"Script aborted\") }\n\n} else {\n\tif (prefs.useLog) { log(\"🟢 Running with gamertag \\\"\" + prefs.gamertag + \"\\\"\") }\n}\n\nif (!prefs.targetCompletionDate) {\n\n\tif (prefs.useLog) { log(\"🔴 No Target Completion Date Set\") }\n\n\ttargetCompletionDateAlert = new Alert()\n\ttargetCompletionDateAlert.title = \"No Target Completion Date Set\"\n\ttargetCompletionDateAlert.message = \"This is used to determine the Goal, how much XP you need per day. Enter it below then tap Return on your keyboard.\"\n\ttargetCompletionDateAlert.addAction(\"Cancel\")\n\tlet alertIndex = await targetCompletionDateAlert.presentAlert()\n\n\tif (alertIndex == 0) { throw new Error(\"Script aborted\") }\n\n} else {\n\tif (prefs.useLog) { log(\"🟢 Running with Target Completion Date \\\"\" + prefs.targetCompletionDate + \"\\\"\") }\n}\n\n\nif (prefs.useBackgroundImage && !fm.fileExists(fm.documentsDirectory() + \"\/H5-XP-bgImage.png\")) {\n\n\tif (prefs.useLog) { log(\"🟡 BG Image not found. Downloading and saving to iCloud...\") }\n\n\tlet img = await new Request(\"https:\/\/raw.githubusercontent.com\/sac396\/H5-XP-iOS-Widget\/main\/H5-XP-bgImage.png\").loadImage()\n\tfm.writeImage(fm.documentsDirectory() + \"\/H5-XP-bgImage.png\", img)\n}\n\n\n\/*-----------------------------------------*\/\n\/*  Check for Updates                   *\/\n\/*-----------------------------------------*\/\n\n\nif (prefs.checkForUpdates) {\n\tlet newestVer = await new Request(\"https:\/\/raw.githubusercontent.com\/sac396\/H5-XP-iOS-Widget\/main\/version.json\").loadJSON()\n\tif (newestVer[0] > currentVer) {\n\t\tlog(\"🟡 Version \" + newestVer[0] + \" of H5-XP avalible at https:\/\/raw.githubusercontent.com\/sac396\/H5-XP-iOS-Widget\/main\/H5-XP.js. You have version \" + currentVer)\n\t} else {\n\t\tlog(\"🟢 H5-XP is up to date. You have version \" + currentVer)\n\t}\n}\n\n\n\/*-----------------------------------------*\/\n\/*  Come up with the values to display     *\/\n\/*\tand retrieve storedValues              *\/\n\/*-----------------------------------------*\/\n\n\n\/\/ retrieve storedValues\nlet storedValues = fm.documentsDirectory() + \"\/H5-XP-storedValues.json\"\nfm.downloadFileFromiCloud(storedValues)\nstoredValues = (JSON.parse(fm.readString(storedValues)))\n\n\nlet storedXPs = storedValues[\"xp\"]\nlet storedHours = storedValues[\"hours\"]\n\nlet dates = Object.keys(storedXPs)\nlet datesString = dates.toString()\n\n\n\/\/ get the XP you started with today\nlet bottomMostDateTime = (new Date(dates[dates.length - 1]))\nlet bottomMostDate = bottomMostDateTime.toDateString()\nlet key = datesString.match(new RegExp(bottomMostDate + \"[^,]*\"))\nxpAtDayStart = storedXPs[key]\n\nif (!fm.fileExists(fm.documentsDirectory() + \"\/H5-XP-storedValues.json\") || prefs[\"resetStoredValues\"]) {\n\tlog(\"🟡 Creating new H5-XP-storedValues.json file...\")\n\tlet storedValues = { \"xp\": {}, \"hours\": {} }\n\tfm.writeString(fm.documentsDirectory() + \"\\\/H5-XP-storedValues.json\", JSON.stringify(storedValues, null, 4))\n}\n\n\/\/ write new values to storedValues\n\n\/\/ if (prefs.updateStoredValuesOnEachRun) {\n\n\/\/ \tlog(((prefs.updateStoredValuesOnEachRunInterval * 3600000) + Date.parse(bottomMostDateTime)))\n\/\/ \tlog(Date.parse(bottomMostDateTime))\n\n\/\/ \tif (Date.parse(bottomMostDateTime) > ((prefs.updateStoredValuesOnEachRunInterval * 3600000) + Date.parse(bottomMostDateTime))) {\n\/\/ \t\tlet currentXP = (await smartHTTPRequest(\"https:\/\/www.haloapi.com\/stats\/h5\/servicerecords\/arena?players=!gamertag\"))[\"Results\"][0][\"Result\"][\"Xp\"]\n\n\/\/ \t\tlet WZDuration = (await smartHTTPRequest(\"https:\/\/www.haloapi.com\/stats\/h5\/servicerecords\/warzone?players=!gamertag\"))[\"Results\"][0][\"Result\"][\"WarzoneStat\"][\"TotalTimePlayed\"]\n\/\/ \t\tlet ArenaDuration = (await smartHTTPRequest(\"https:\/\/www.haloapi.com\/stats\/h5\/servicerecords\/arena?players=!gamertag\"))[\"Results\"][0][\"Result\"][\"ArenaStats\"][\"TotalTimePlayed\"]\n\/\/ \t\tlet currentHours = durationToHours(WZDuration) + durationToHours(ArenaDuration)\n\n\/\/ \t\tlet now = new Date()\n\/\/ \t\tstoredValues[\"xp\"][now] = currentXP\n\/\/ \t\tstoredValues[\"hours\"][now] = currentHours\n\n\/\/ \t\tfm.writeString(fm.documentsDirectory() + \"\\\/H5-XP-storedValues.json\", JSON.stringify(storedValues, null, 4))\n\/\/ \t}\n\/\/ }\n\n\n\n\nlet customAverageXPRate\nif (prefs.showCustomAverageRate) {\n\n\tlet customAverageXPArray = []\n\tlet customAverageHoursArray = []\n\tlet failedMatches = 0\n\n\tlet bottomMostDateTime = new Date(dates[dates.length - 1])\n\n\t\/\/ generate array of xp\n\tfor (i = 0; i < prefs.customAverageRateDays; i++) {\n\n\t\t\/\/ not sure why i need this, but for some reason the script doesn't work without it\n\t\tbottomMostDateTime = new Date(dates[dates.length - 1])\n\n\t\tlet key = bottomMostDateTime.setDate(bottomMostDateTime.getDate() - i)\n\t\tkey = datesString.match(new RegExp(new Date(key).toDateString() + \"[^,]*\"))\n\n\t\tif (storedXPs[key] == undefined || storedHours[key] == undefined || storedHours[key] == null || storedHours[key] == null) {\n\t\t\tfailedMatches += 1\n\t\t} else {\n\t\t\tcustomAverageXPArray.push(storedXPs[key])\n\t\t\tcustomAverageHoursArray.push(storedHours[key])\n\t\t}\n\t}\n\n\tif (!failedMatches == 0) { log(\"🟠 The number set for \\\"customAverageRateDays\\\" is \" + prefs.customAverageRateDays + \" days, but there are only \" + (prefs.customAverageRateDays - failedMatches) + \" data points to include in this calculation.\") }\n\n\t\/\/ finally get the average rate for the given time period\n\tcustomAverageXPRate = (Math.max(...customAverageXPArray) - Math.min(...customAverageXPArray)) \/ (Math.max(...customAverageHoursArray) - Math.min(...customAverageHoursArray))\n}\n\nlet customDaysGains\nif (prefs.showCustomDaysGains) {\n\n\tlet customAverageXPArray = []\n\tlet failedMatches = 0\n\n\tlet bottomMostDateTime = new Date(dates[dates.length - 1])\n\n\t\/\/ generate array of xp\n\tfor (i = 0; i < prefs.customDaysGainsDays; i++) {\n\n\t\t\/\/ not sure why i need this, but for some reason the script doesn't work without it\n\t\tbottomMostDateTime = new Date(dates[dates.length - 1])\n\n\t\tlet key = bottomMostDateTime.setDate(bottomMostDateTime.getDate() - i)\n\t\tkey = datesString.match(new RegExp(new Date(key).toDateString() + \"[^,]*\"))\n\n\t\tif (storedXPs[key] == undefined || storedHours[key] == undefined || storedHours[key] == null || storedHours[key] == null) {\n\t\t\tfailedMatches += 1\n\t\t} else {\n\t\t\tcustomAverageXPArray.push(storedXPs[key])\n\t\t}\n\t}\n\n\tif (!failedMatches == 0) { log(\"🟠 The number set for \\\"customDaysGainsDays\\\" is \" + prefs.customDaysGainsDays + \" days, but there are only \" + (prefs.customDaysGainsDays - failedMatches) + \" data points to include in this calculation.\") }\n\n\t\/\/ finally get the average rate for the given time period\n\tcustomDaysGains = Math.max(...customAverageXPArray) - Math.min(...customAverageXPArray)\n}\n\n\/*-----------------------------------------*\/\n\/*  HTTP Requests                          *\/\n\/*-----------------------------------------*\/\n\n\nlet emblemImage = (await smartHTTPRequest(\"https:\/\/www.haloapi.com\/profile\/h5\/profiles\/!gamertag\/emblem\", httpRequestDependecies[\"armor\"], true))\n\nlet armorImage = (await smartHTTPRequest(\"https:\/\/www.haloapi.com\/profile\/h5\/profiles\/!gamertag\/spartan\", httpRequestDependecies[\"emblem\"], true))\n\nlet totalXP = (await smartHTTPRequest(\"https:\/\/www.haloapi.com\/stats\/h5\/servicerecords\/arena?players=!gamertag\", httpRequestDependecies[\"xp\"]))[\"Results\"][0][\"Result\"][\"Xp\"]\n\nlet currentSR = (await smartHTTPRequest(\"https:\/\/www.haloapi.com\/stats\/h5\/servicerecords\/arena?players=!gamertag\", httpRequestDependecies[\"sr\"]))[\"Results\"][0][\"Result\"][\"SpartanRank\"]\n\nlet WZDuration = (await smartHTTPRequest(\"https:\/\/www.haloapi.com\/stats\/h5\/servicerecords\/warzone?players=!gamertag\", httpRequestDependecies[\"timePlayed\"]))[\"Results\"][0][\"Result\"][\"WarzoneStat\"][\"TotalTimePlayed\"]\n\nlet ArenaDuration = (await smartHTTPRequest(\"https:\/\/www.haloapi.com\/stats\/h5\/servicerecords\/arena?players=!gamertag\", httpRequestDependecies[\"timePlayed\"]))[\"Results\"][0][\"Result\"][\"ArenaStats\"][\"TotalTimePlayed\"]\n\n\n\/*-----------------------------------------*\/\n\/*  Set Up Draw Contexts                   *\/\n\/*-----------------------------------------*\/\n\nif (prefs.useLog) { log(\"🟢 Setting up widget...\") }\n\n\nlet widget = new ListWidget()\nwidget.setPadding(0, 0, 0, 0)\n\n\nlet dc = new DrawContext()\ndc.opaque = false\ndc.size = new Size(675, 275)\n\n\nfont = new Font(prefs.font, prefs.fontSize)\ndc.setFont(font)\ndc.setTextColor(new Color(\"#ffffff\"))\n\n\nlet leftOffset = 95\nlet topOffset = 16 + prefs.heightOffset\nlet rightOffset = 452\nlet rectHeight = 30\n\n\nlet elementIndex = 0\nfunction addTextElement(left, right, isFooter) {\n\tlet textContainer\n\tif (isFooter) {\n\t\ttextContainer = new Rect(leftOffset, topOffset + 225, (rightOffset - leftOffset), rectHeight)\n\t} else {\n\t\ttextContainer = new Rect(leftOffset, topOffset + elementIndex * rectHeight, (rightOffset - leftOffset), rectHeight)\n\t}\n\tdc.setTextAlignedLeft()\n\tdc.drawTextInRect(left, textContainer)\n\tdc.setTextAlignedRight()\n\tdc.drawTextInRect(right, textContainer)\n\tif (prefs.useLog) { log(\"🟢 Successfully drew \\\"\" + left + \" : \" + right + \"\\\"\") }\n\telementIndex += 1\n}\n\n\n\/*-----------------------------------------*\/\n\/*  Draw Things                            *\/\n\/*-----------------------------------------*\/\n\n\n\/\/ Right side : Armor + Emblem\n\nif (prefs.showEmblem) {\n\tlet emblemImageScale = .75\n\tdc.drawImageInRect(emblemImage, new Rect(455, 30, 256 * emblemImageScale, 256 * emblemImageScale))\n\tif (prefs.useLog) { log(\"🟢 Successfully drew emblem image\") }\n}\n\nif (prefs.showArmor) {\n\tlet armorImageScale = .4\n\tdc.drawImageInRect(armorImage, new Rect(510, 50, 512 * armorImageScale, 672 * armorImageScale))\n\tif (prefs.useLog) { log(\"🟢 Successfully drew armor image\") }\n}\n\n\n\/\/ Left side : Stats\n\n\nlet nf = new Intl.NumberFormat\n\n\nif (prefs.showSR) { addTextElement(\"SR \" + currentSR, \"\") }\n\nif (prefs.showTotalXP) { addTextElement(\"TOTAL\", nf.format(totalXP) + \" (\" + Math.round(totalXP \/ 50000) \/ 10 + \"%)\") }\n\nif (prefs.showTodaysXP) { addTextElement(\"TODAY\", nf.format(totalXP - xpAtDayStart)) }\n\nif (prefs.showLifetimeRate) { addTextElement(\"LIFETIME AVERAGE\", nf.format(Math.round(totalXP \/ (durationToHours(WZDuration) + durationToHours(ArenaDuration)))) + \" XP\/HR\") }\n\nif (prefs.showCustomAverageRate) { addTextElement(prefs.customAverageRateDays + \" DAY AVERAGE\", nf.format(Math.round(customAverageXPRate)) + \" XP\/HR\") }\n\nif (prefs.showCustomDaysGains) { addTextElement(\"GAINS LAST \" + prefs.customDaysGainsDays + \" DAYS\", nf.format(Math.round(customDaysGains))) }\n\n\nif (prefs.showTodaysGoal) {\n\tlet daysUntilTarget = Math.ceil((new Date(prefs.targetCompletionDate) - new Date()) \/ (1000 * 60 * 60 * 24))\n\tif (xpAtDayStart >= 50000000 || prefs.use100MilInstead) {\n\t\taddTextElement(\"GOAL\", nf.format(Math.ceil((100000000 - xpAtDayStart) \/ daysUntilTarget)))\n\t} else {\n\t\taddTextElement(\"GOAL\", nf.format(Math.ceil((50000000 - xpAtDayStart) \/ daysUntilTarget)))\n\t}\n}\n\n\nlet showXPtoNextSRBool\nif (prefs[\"showXPtoNextSR\"] == \"auto\") {\n\tif (currentSR <= 151) { showXPtoNextSRBool = true }\n\telse { showXPtoNextSRBool = false }\n} else { showXPtoNextSRBool = prefs[\"showXPtoNextSR\"] }\n\nif (showXPtoNextSRBool) {\n\tlet XPperSR =\n\t\t[\n\t\t\t0,\n\t\t\t300,\n\t\t\t3600,\n\t\t\t6600,\n\t\t\t10700,\n\t\t\t13700,\n\t\t\t17500,\n\t\t\t22500,\n\t\t\t28500,\n\t\t\t37000,\n\t\t\t41000,\n\t\t\t47000,\n\t\t\t54500,\n\t\t\t63500,\n\t\t\t74500,\n\t\t\t87000,\n\t\t\t101500,\n\t\t\t118000,\n\t\t\t137000,\n\t\t\t160000,\n\t\t\t167000,\n\t\t\t176000,\n\t\t\t187500,\n\t\t\t201000,\n\t\t\t217000,\n\t\t\t236000,\n\t\t\t258000,\n\t\t\t282500,\n\t\t\t310000,\n\t\t\t340000,\n\t\t\t349500,\n\t\t\t361500,\n\t\t\t376500,\n\t\t\t394000,\n\t\t\t414500,\n\t\t\t438000,\n\t\t\t464000,\n\t\t\t493000,\n\t\t\t525500,\n\t\t\t562000,\n\t\t\t574000,\n\t\t\t589000,\n\t\t\t607500,\n\t\t\t629000,\n\t\t\t654000,\n\t\t\t682000,\n\t\t\t713500,\n\t\t\t748500,\n\t\t\t786500,\n\t\t\t828000,\n\t\t\t873000,\n\t\t\t922000,\n\t\t\t975500,\n\t\t\t1035000,\n\t\t\t1100000,\n\t\t\t1115000,\n\t\t\t1135000,\n\t\t\t1155000,\n\t\t\t1180000,\n\t\t\t1210000,\n\t\t\t1245000,\n\t\t\t1280000,\n\t\t\t1320000,\n\t\t\t1365000,\n\t\t\t1415000,\n\t\t\t1465000,\n\t\t\t1520000,\n\t\t\t1580000,\n\t\t\t1645000,\n\t\t\t1720000,\n\t\t\t1735000,\n\t\t\t1755000,\n\t\t\t1780000,\n\t\t\t1810000,\n\t\t\t1845000,\n\t\t\t1885000,\n\t\t\t1930000,\n\t\t\t1975000,\n\t\t\t2025000,\n\t\t\t2080000,\n\t\t\t2140000,\n\t\t\t2205000,\n\t\t\t2275000,\n\t\t\t2355000,\n\t\t\t2440000,\n\t\t\t2465000,\n\t\t\t2490000,\n\t\t\t2520000,\n\t\t\t2555000,\n\t\t\t2595000,\n\t\t\t2640000,\n\t\t\t2690000,\n\t\t\t2745000,\n\t\t\t2805000,\n\t\t\t2870000,\n\t\t\t2940000,\n\t\t\t3015000,\n\t\t\t3095000,\n\t\t\t3180000,\n\t\t\t3270000,\n\t\t\t3300000,\n\t\t\t3335000,\n\t\t\t3375000,\n\t\t\t3420000,\n\t\t\t3470000,\n\t\t\t3530000,\n\t\t\t3595000,\n\t\t\t3665000,\n\t\t\t3740000,\n\t\t\t3820000,\n\t\t\t3905000,\n\t\t\t3995000,\n\t\t\t4090000,\n\t\t\t4200000,\n\t\t\t4320000,\n\t\t\t4355000,\n\t\t\t4395000,\n\t\t\t4440000,\n\t\t\t4495000,\n\t\t\t4555000,\n\t\t\t4620000,\n\t\t\t4690000,\n\t\t\t4765000,\n\t\t\t4845000,\n\t\t\t4935000,\n\t\t\t5025000,\n\t\t\t5120000,\n\t\t\t5220000,\n\t\t\t5330000,\n\t\t\t5475000,\n\t\t\t5520000,\n\t\t\t5575000,\n\t\t\t5640000,\n\t\t\t5710000,\n\t\t\t5790000,\n\t\t\t5880000,\n\t\t\t5980000,\n\t\t\t6085000,\n\t\t\t6200000,\n\t\t\t6325000,\n\t\t\t6460000,\n\t\t\t6615000,\n\t\t\t6800000,\n\t\t\t7050000,\n\t\t\t7750000,\n\t\t\t9000000,\n\t\t\t11050000,\n\t\t\t14000000,\n\t\t\t18000000,\n\t\t\t24000000,\n\t\t\t35000000,\n\t\t\t50000000\n\t\t]\n\tlet XPtoNextSR = XPperSR[currentSR] - totalXP\n\taddTextElement(\"XP TO SR \" + (currentSR += 1), nf.format(XPtoNextSR))\n}\n\nif (prefs.showXPtoMax) {\n\tif (currentSR >= 152) { addTextElement(\"XP TO 100 MIL\", nf.format(100000000 - totalXP), true) }\n\telse { addTextElement(\"XP SR 152\", nf.format(50000000 - totalXP), true) }\n}\n\n\n\/*-----------------------------------------*\/\n\/*  Assemble Widget                        *\/\n\/*-----------------------------------------*\/\n\nif (prefs.useLog) { log(\"🟢 Assembling final widget...\") }\n\n\nwidget.backgroundImage = Image.fromFile(fm.documentsDirectory() + \"\/H5-XP-bgImage.png\")\n\n\nlet dcImage = dc.getImage()\ndcImage = widget.addImage(dcImage)\ndcImage = dcImage.centerAlignImage()\n\n\nScript.setWidget(widget)\n\n\nif (prefs.useLog) { log(\"🟢 Done. Completed in \" + ((new Date() - startDate) \/ 1000) + \" seconds.\") }",
  "share_sheet_inputs" : [

  ]
}
